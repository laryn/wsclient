<?php
// $Id$

/**
 * @file
 * Web service client SOAP/REST Tests.
 */

class WSClientSOAPTestCase extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Web service client SOAP',
      'description' => 'Tests invoking a SOAP service.',
      'group' => 'Services',
    );
  }

  function setUp() {
    parent::setUp('wsclient_examples');
  }

  /**
   * Tests invoking the geocoder.us service.
   */
  function testServiceInvocation() {
    $service = wsclient_service_load('geocoder');
    $result = $service->geocode_address('1600 Pennsylvania Av, Washington, DC');
    $this->assertEqual($result[0]->zip, '20502', 'SOAP service invocation was successful.');
  }
}

class WSClientSOAPRulesTestCase extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Web service client SOAP Rules',
      'description' => 'Tests the Rules integration of the SOAP endpoint.',
      'group' => 'Services',
    );
  }

  function setUp() {
    parent::setUp('wsclient_examples', 'rules');
  }

  /**
   * Tests invoking the geocoder.us service.
   */
  function testRulesIntegration() {
    list($result) = rules_action('wsclient_geocoder_geocode_address', array())
         ->execute('1600 Pennsylvania Av, Washington, DC');
    $this->assertEqual($result[0]->zip, '20502', 'SOAP service invoked via the action.');

    $rule = rule(array('address' => array('type' => 'text')));
    $rule->action('wsclient_geocoder_geocode_address', array('param_address:select' => 'address'))
         ->action('drupal_message', array('message:select' => 'result:0:zip'))
         ->execute('1600 Pennsylvania Av, Washington, DC');

    RulesLog::logger()->checkLog();
    $msg = drupal_get_messages();
    $this->assertEqual(array_pop($msg['status']), '20502', 'SOAP service has been invoked.');
  }

}

class WSClientRESTTestCase extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Web service client REST',
      'description' => 'Tests invoking a RESTful service.',
      'group' => 'Services',
    );
  }

  function setUp() {
    parent::setUp('wsclient_examples');
  }

  /**
   * Tests invoking the google translation service.
   */
  function testServiceInvocation() {
    $service = wsclient_service_load('google');
    $result = $service->translate('Hallo Welt', 'de|en');
    $this->assertEqual(drupal_strtolower($result['responseData']['translatedText']), 'hello world', 'REST service invocation was successful.');
  }
}

class WSClientRESTRulesTestCase extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Web service client REST Rules',
      'description' => 'Tests the Rules integration of the REST endpoint.',
      'group' => 'Services',
    );
  }

  function setUp() {
    parent::setUp('wsclient_examples', 'rules');
  }

  /**
   * Tests invoking the google translation service.
   */
  function testRulesIntegration() {
    list($result) = rules_action('wsclient_google_translate', array(
           'param_langpair' => 'de|en',
         ))->execute('Hallo Welt');
    $this->assertEqual(drupal_strtolower($result['responseData']['translatedText']), 'hello world', 'REST service invoked via the action.');

    // Test making use of the provided variable.
    $rule = rule(array('text' => array('type' => 'text')));
    $rule->action('wsclient_google_translate', array(
           'param_q:select' => 'text',
           'param_langpair' => 'de|en',
         ))
         ->action('drupal_message', array('message:select' => 'result:responseData:translatedText'))
         ->execute('Hallo Welt');
    RulesLog::logger()->checkLog();
    $msg = drupal_get_messages();
    $this->assertEqual(drupal_strtolower(array_pop($msg['status'])), 'hello world', 'REST service has been invoked.');
  }

}

class WSClientRestWSTestCase extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Web service client RestWS',
      'description' => 'Tests invoking the local RestWS service.',
      'group' => 'Services',
    );
  }

  function setUp() {
    parent::setUp('restws', 'restws_basic_auth', 'wsclient_examples');
  }

  /**
   * Test the RestWS node service.
   */
  function testGet() {
    $title = $this->randomName(8);
    $node = $this->drupalCreateNode(array('title' => $title));
    $account = $this->drupalCreateUser(array('access resource node'));
    $service = wsclient_service_load('restws_node');
    $this->addSimpletestCurlOptions($service, $account);
    $result = $service->get($node->nid);
    $this->assertEqual($node->title, $result['title'], 'Node title received correctly');
  }

  /**
   * Helper function to add the right cURL headers so that we connect to the simpletest DB.
   */
  protected function addSimpletestCurlOptions($service, $account) {
    $curl_options[CURLOPT_HTTPAUTH] = CURLAUTH_BASIC;
    $curl_options[CURLOPT_USERPWD] = $account->name . ':' . $account->pass_raw;
    if (preg_match('/simpletest\d+/', $this->databasePrefix, $matches)) {
      $curl_options[CURLOPT_USERAGENT] = drupal_generate_test_ua($matches[0]);
    }
    $service->settings['curl options'] = $curl_options;
  }
}
