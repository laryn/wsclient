<?php
// $Id$

/**
 * @file
 * Web service client endpoint for invoking a RESTful service.
 */

/**
 * Implements hook_wsclient_endpoint_types().
 */
function wsclient_rest_wsclient_endpoint_types() {
  return array(
    'REST' => array(
      'label' => t('REST'),
      'class' => 'WSClientRESTEndpoint',
    ),
  );
}

/**
 * A remote endpoint type for invoking REST services.
 */
class WSClientRESTEndpoint implements WSClientEndpointInterface {

  /**
   * @var WSClientServiceDescription
   */
  protected $service;

  protected $url;

  /**
   * @var RestClient
   */
  protected $client;

  public function __construct(WSClientServiceDescription $service) {
    $this->service = $service;
    $this->url = $service->url;
  }

  public function client() {
    if (!isset($this->client)) {
      if (!empty($this->service->settings['formatter'])) {
        $this->client = new RestClient(NULL, $this->service->settings['formatter']);
      }
      else {
        $this->client = new RestClient(NULL, new RestClientBaseFormatter(RestClientBaseFormatter::FORMAT_JSON));
      }
      // Pass through additional curl options.
      if (!empty($this->service->settings['curl options'])) {
        $this->client->curlOpts = $this->service->settings['curl options'];
      }
    }
    return $this->client;
  }

  /**
   * Calls the REST service.
   *
   * @param string $operation
   *   The name of the operation to execute.
   * @param array $arguments
   *   Arguments to pass to the service with this operation.
   */
  public function call($operation, $arguments) {
    $operation_url = $this->service->settings['operations'][$operation]['url'];
    $client = $this->client();
    try {
      $response = $client->get($this->service->url . $operation_url, $named_arguments);
      return $response['responseData'];
    }
    catch (RestClientException $e) {
      throw new WSClientException('Error invoking the REST service %name, operation %operation: %error', array('%name' => $service->label, '%operation' => $operation, '%error' => $e->getMessage()));
    }
  }

  // This endpoint type doesn't provide events.
  public function events() {}
  public function subscribe($event) {}
  public function unsubscribe($event) {}

  // TODO: Add in order to support resources.
  public function load($type, $id) {}


  public function entities() {
    if (!empty($this->service->settings['resources'])) {
      return $this->service->settings['resources'];
    }
  }

  public function dataTypes() {
    if (!empty($this->service->settings['data types'])) {
      return $this->service->settings['data types'];
    }
  }

  public function actions() {
    $actions = array();
    foreach ($this->service->settings['operations'] as $name => $operation) {
      $actions[$name] = $operation += array(
        'base' => 'wsclient_rest_call',
        'named parameter' => TRUE,
      );
      $actions[$name]['parameter'] = array();
      // Prefix operation parameter names to avoid name clashes.
      foreach ((array)$operation['parameter'] as $param => $info) {
        $actions[$name]['parameter']['param_' . $param] = $info;
      }
      $actions[$name]['parameter']['remote'] = array(
        'type' => 'hidden',
        'default value' => $this->service->name,
      );
      $actions[$name]['parameter']['url'] = array(
        'type' => 'hidden',
        'default value' => $operation['url'],
      );
      // Pass through provided variables as they are described, but ensure
      // valid variable names.
      // TODO: Use regex to enforce valid PHP variable name and/or map names?
      if (!empty($actions[$name]['provides'])) {
        foreach ($actions[$name]['provides'] as $var => $info) {
          unset($actions[$name]['provides'][$var]);
          $actions[$name]['provides'][strtolower($var)] = $info;
        }
      }
    }
    return $actions;
  }

  public function conditions() {}
  public function formAlter(&$form, &$form_state) { }
}

/**
 * Action callback: Invoke a REST service.
 */
function wsclient_rest_call($arguments, RulesPlugin $element) {
  if ($service = wsclient_service_load($arguments['remote'])) {
    $client = $service->endpoint()->client();
    try {
      $rest_args = array();
      foreach ($arguments as $name => $data) {
        if (strpos($name, 'param_') === 0) {
          // Remove the parameter name prefix 'param_'.
          $rest_args[substr($name, 6)] = $data;
        }
      }
      $return = $client->get($service->url . $arguments['url'], $rest_args);
      if (!empty($return) && is_array($return)) {
        $vars = $element->providesVariables();
        // Only pass through returned data matching the described variables.
        foreach ($return as $name => $data) {
          unset($return[$name]);
          if (isset($vars[strtolower($name)])) {
            $return[strtolower($name)] = $data;
          }
        }
        return $return;
      }
    }
    catch (RestClientException $e) {
      throw new WSClientException('Error invoking the REST service %name: %error', array('%name' => $service->label, '%error' => $e->getMessage()));
    }
  }
  else {
    throw new WSClientException('The web service %name cannot be found.', array('%name' => $arguments['remote']));
  }
}
